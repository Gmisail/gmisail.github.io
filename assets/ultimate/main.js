// Generated by Haxe 3.4.4
(function () { "use strict";
var Cell = function(element,id) {
	this.claimedBy = "";
	this.selected = false;
	this.won = false;
	this.active = false;
	this.id = -1;
	this.id = id;
	this.element = element;
	this.children = [];
};
Cell.prototype = {
	locate: function() {
		this.quadrant = Table.getQuadrantFromId(this.id);
	}
	,toggle: function() {
		this.active = !this.active;
		if(this.active) {
			this.element.style.backgroundColor = Global.HIGHLIGHT;
		} else {
			this.element.style.backgroundColor = "transparent";
		}
	}
	,select: function(symbol) {
		if(this.element.innerText == "_") {
			if(Table.nextQuadrant == -1 || Table.nextQuadrant == this.quadrant) {
				this.element.innerText = symbol;
				this.element.style.color = "black";
				this.selected = true;
				return true;
			}
		}
		return false;
	}
	,claimed: function(by) {
		return this.element.innerText == by;
	}
	,isFull: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(!Table.getCellById(cell).selected) {
				return false;
			}
		}
		return true;
	}
};
var Game = function() { };
Game.start = function() {
};
Game.checkCells = function(type,cells,a,b,c) {
	if(Table.getCellById(cells[a]).claimed(type) && Table.getCellById(cells[b]).claimed(type)) {
		return Table.getCellById(cells[c]).claimed(type);
	} else {
		return false;
	}
};
Game.selectCells = function(cells,a,b,c) {
	Table.getCellById(cells[a]).element.style.fontWeight = "bold";
	Table.getCellById(cells[b]).element.style.fontWeight = "bold";
	Table.getCellById(cells[c]).element.style.fontWeight = "bold";
};
Game.check = function(quadrant) {
	var quadrant1 = Table.parents[quadrant];
	var cells = quadrant1.children;
	if(quadrant1.claimedBy == "") {
		var _g = 0;
		while(_g < 3) {
			var y = _g++;
			if(Game.checkCells("X",cells,y * 3,1 + y * 3,2 + y * 3)) {
				quadrant1.claimedBy = "X";
				quadrant1.won = true;
				Game.selectCells(cells,y * 3,1 + y * 3,2 + y * 3);
			}
			if(Game.checkCells("O",cells,y * 3,1 + y * 3,2 + y * 3)) {
				quadrant1.claimedBy = "O";
				quadrant1.won = true;
				Game.selectCells(cells,y * 3,1 + y * 3,2 + y * 3);
			}
		}
		var _g1 = 0;
		while(_g1 < 3) {
			var x = _g1++;
			if(Game.checkCells("X",cells,x,3 + x,6 + x)) {
				quadrant1.claimedBy = "X";
				quadrant1.won = true;
				Game.selectCells(cells,x,3 + x,6 + x);
			}
			if(Game.checkCells("O",cells,x,3 + x,6 + x)) {
				quadrant1.claimedBy = "O";
				quadrant1.won = true;
				Game.selectCells(cells,x,3 + x,6 + x);
			}
		}
		if(Game.checkCells("O",cells,0,4,8)) {
			quadrant1.claimedBy = "O";
			quadrant1.won = true;
			Game.selectCells(cells,0,4,8);
		}
		if(Game.checkCells("X",cells,0,4,8)) {
			quadrant1.claimedBy = "X";
			quadrant1.won = true;
			Game.selectCells(cells,0,4,8);
		}
		if(Game.checkCells("O",cells,2,4,6)) {
			quadrant1.claimedBy = "O";
			quadrant1.won = true;
			Game.selectCells(cells,2,4,6);
		}
		if(Game.checkCells("X",cells,2,4,6)) {
			quadrant1.claimedBy = "X";
			quadrant1.won = true;
			Game.selectCells(cells,2,4,6);
		}
	}
};
Game.checkQuadrants = function() {
	var quadrants = Table.parents;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		if(quadrants[i * 3].won && quadrants[1 + i * 3].won && quadrants[2 + i * 3].won) {
			if(quadrants[i * 3].claimedBy == quadrants[1 + i * 3].claimedBy && quadrants[1 + i * 3].claimedBy == quadrants[2 + i * 3].claimedBy) {
				Game.setWinner(quadrants[i * 3].claimedBy);
			}
		}
	}
	var _g1 = 0;
	while(_g1 < 3) {
		var i1 = _g1++;
		if(quadrants[i1].won && quadrants[3 + i1].won && quadrants[6 + i1].won) {
			if(quadrants[i1].claimedBy == quadrants[3 + i1].claimedBy && quadrants[6 + i1].claimedBy == quadrants[3 + i1].claimedBy) {
				Game.setWinner(quadrants[i1].claimedBy);
			}
		}
	}
	if(quadrants[0].won && quadrants[4].won && quadrants[8].won) {
		if(quadrants[0].claimedBy == quadrants[4].claimedBy && quadrants[8].claimedBy == quadrants[4].claimedBy) {
			Game.setWinner(quadrants[0].claimedBy);
		}
	}
	if(quadrants[2].won && quadrants[4].won && quadrants[6].won) {
		if(quadrants[2].claimedBy == quadrants[4].claimedBy && quadrants[6].claimedBy == quadrants[4].claimedBy) {
			Game.setWinner(quadrants[2].claimedBy);
		}
	}
};
Game.getActiveSymbol = function() {
	if(Game.activePlayer == "P1") {
		return "X";
	} else {
		return "O";
	}
};
Game.setActivePlayer = function(player) {
	Game.activePlayer = player;
	JQ.get(".player").text("" + Game.activePlayer + " (" + Game.getActiveSymbol() + ")");
};
Game.toggleActivePlayer = function(message) {
	if(message == null) {
		message = "";
	}
	if(Game.activePlayer == "P1") {
		Game.activePlayer = "P2";
	} else if(Game.activePlayer == "P2") {
		Game.activePlayer = "P1";
	}
	Game.setMessage(message);
};
Game.setMessage = function(message) {
	if(message == "") {
		JQ.get(".player").text("" + Game.activePlayer + " (" + Game.getActiveSymbol() + ")");
	} else {
		JQ.get(".player").text("" + Game.activePlayer + " (" + Game.getActiveSymbol() + ") - " + message);
	}
};
Game.setWinner = function(symbol) {
	JQ.get(".turn").hide();
	JQ.get(".win").show();
	JQ.get(".win").text("\"" + symbol + "\" won the match.");
};
var Global = function() { };
var JQ = function() { };
JQ.get = function(e) {
	return $(e);
};
var Main = function() { };
Main.main = function() {
	JQ.get(".win").hide();
	Table.setup();
	Game.setActivePlayer("P1");
};
var Table = function() { };
Table.setup = function() {
	console.log("Ultimate Tic Tac Toe, written by Graham Misail. June 2018.");
	Table.cells = [];
	Table.parents = [];
	var tdArray = window.document.getElementsByTagName("td");
	var _g = 0;
	while(_g < tdArray.length) {
		var td = tdArray[_g];
		++_g;
		if(td.classList[0] != "parentCell") {
			Table.cells.push(new Cell(td,Table.cells.length));
		} else {
			Table.parents.push(new Cell(td,Table.parents.length));
		}
	}
	var _g1 = 0;
	var _g11 = Table.parents;
	while(_g1 < _g11.length) {
		var quadrant = _g11[_g1];
		++_g1;
		var i = Table.parents.indexOf(quadrant);
		quadrant.children = [i * 9,1 + i * 9,2 + i * 9,3 + i * 9,4 + i * 9,5 + i * 9,6 + i * 9,7 + i * 9,8 + i * 9];
	}
	var _g2 = 0;
	var _g12 = Table.cells;
	while(_g2 < _g12.length) {
		var cell = [_g12[_g2]];
		++_g2;
		cell[0].locate();
		cell[0].element.onclick = (function(cell1) {
			return function() {
				Table.onCellPress(cell1[0]);
			};
		})(cell);
	}
};
Table.onCellPress = function(cell) {
	if(cell.select(Game.getActiveSymbol())) {
		if(Table.parents[Table.nextQuadrant] != null) {
			Table.toggleQuadrantFromId(Table.nextQuadrant);
			Game.check(Table.nextQuadrant);
		}
		Game.toggleActivePlayer();
		Game.checkQuadrants();
		Table.nextQuadrant = Table.parents[cell.quadrant].children.indexOf(cell.id);
		if(Table.parents[Table.nextQuadrant].isFull()) {
			Table.nextQuadrant = -1;
			Game.setMessage("You can go in any quadrant!");
		} else {
			Table.toggleQuadrantFromId(Table.nextQuadrant);
		}
	}
};
Table.getCell = function(x,y) {
	var id = y * 9 + x;
	return Table.getCellById(id);
};
Table.getCellById = function(id) {
	return Table.cells[id];
};
Table.getQuadrant = function(x,y) {
	var id = y * 9 + x;
	return Table.getQuadrantFromId(id);
};
Table.getQuadrantFromId = function(id) {
	var _g = 0;
	var _g1 = Table.parents;
	while(_g < _g1.length) {
		var parent = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = parent.children;
		while(_g2 < _g3.length) {
			var child = _g3[_g2];
			++_g2;
			if(id == child) {
				return Table.parents.indexOf(parent);
			}
		}
	}
	return -1;
};
Table.toggleQuadrant = function(x,y) {
	Table.toggleQuadrantFromId(y * 3 + x);
};
Table.toggleQuadrantFromId = function(id) {
	Table.parents[id].toggle();
};
Game.activePlayer = "P1";
Global.HIGHLIGHT = "#48A74A";
Table.nextQuadrant = -1;
Main.main();
})();
